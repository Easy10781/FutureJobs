from dataclasses import dataclass

from django.shortcuts import render


jobs = []


@dataclass
class Job:
    name: str
    description: str
    url: str
    id: int = 0
    
    def short_desc(self):
        short = ''
        for i in range(80): short += self.description[i]
        short += '...'
        return short


def get_job(name):
    return [i for i in jobs if i.name == name][0]


jobs.extend([
    Job("Психотерапевт",
        "Причина популярности здесь та же — мир усложняются, "
        "в дело вступают новые угрозы. Это заставляет нас больше тревожиться "
        "и обостряет проблемы, травмы и страхи, которые могли бы еще долго "
        "оставаться непроработанными: тревогу, одиночество, страх близости. "
        "Поэтому психотерапевт будет все более актуальным помощником, навигатором для людей будущего.",
        "psichoterapevt"),
    Job("IoT-разработчик",
        "Разработчики девайсов и приложений для интернета вещей будут становиться все более востребованными. "
        "Мир впервые за последние 30 лет так значительно разъединился. "
        "Это не только закрыло, "
        "но еще и откроет множество возможностей и потребностей для развития цифровых сервисов, "
        "которые помогают взаимодействовать с физическими объектами без этого самого взаимодействия",
        "iotrazrabotchik"),
    Job("Руководитель цифровой трансформации",
        "Эта должность в оригинале называется Chief Digital Transformation Officer, "
        "CDTO (а еще — директор по цифровым технологиям или Chief Digital Officer, CDO)."
        "Спрос на кадры для цифровой трансформации еще превышает предложение, и нынешний кризис, "
        "последовавший за пандемией, это подтвердил. "
        "При этом быть главным по «цифре» может быть очень трудной работой: "
        "необходимо нести ответственность за цифровую трансформацию своей "
        "организации для ее продуктивности и жизнеспособности в дальнейшем.",
        "rukovoditeltsiftransf"),
    Job("Разработчик мобильных приложений",
        "Развитие мобильной связи продолжает создавать инновационную «тягу» во всех отраслях промышленности. "
        "И поскольку все больше компаний полагаются на мобильные технологии для быстрого доступа к клиентам, "
        "спрос на разработчиков таких приложений будет продолжать расти. "
        "Эти профессионалы находятся на водительском месте, "
        "когда речь заходит о разработке и усовершенствовании программного обеспечения на базе смартфонов и планшетов, "
        "работают над кодированием приложений, тестированием и отладкой.",
        "appdeveloper"),
    Job("Архитектор данных",
        "Хотя сбор данных может быть автоматизирован, "
        "способность переводить, "
        "анализировать и давать бизнес-рекомендации на основе этих данных пользуется большим спросом у работодателей. "
        "По мере того как развивается «Интернет вещей» и все больше устройств и датчиков становятся взаимосвязанными, "
        "объем доступных данных будет только расти. Чтобы ИТ извлекать из него пользу, "
        "компании нуждаются в квалифицированных специалистах, "
        "которые могут переводить информацию в конкретные решения для баз данных.",
        "dataarch"),
    Job("Врачи из разных профессиональных областей",
        "Сегодня роль медиков выходит на первый план и еще более заметна, чем всегда. "
        "И вероятнее всего это уже не изменится после пандемии. "
        "Дополнительно к традиционным специальностям появятся гибридные профессии на стыке биохакинга, "
        "диетологии и профилактической медицины. "
        "К обычно требуемым навыкам добавятся цифровая грамотность и управление стрессом, "
        "а также аналитические способности.", "doctor"),
])

jobs_urls: dict[str, str] = {
    "psichoterapevt": "Психотерапевт",
    "iotrazrabotchik": "IoT-разработчик",
    "rukovoditeltsiftransf": "Руководитель цифровой трансформации",
    "appdeveloper": "Разработчик мобильных приложений",
    "dataarch": "Архитектор данных",
    "doctor": "Врачи из разных профессиональных областей",
}

for job_index in range(len(jobs)):
    jobs[job_index].id = job_index + 1


def index(request):
    return render(request, "index.html", {
        "jobs": jobs
    })


def job(request, job_name):
    return render(request, "job.html", {
        "job": get_job(jobs_urls[job_name])
    })


def about(request):
    return render(request, "about.html")
